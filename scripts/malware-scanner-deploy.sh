
# Setting up variables

REGION=us-central1
LOCATION=us
PROJECT_ID="accurkardia-accurecg"
ENVIRONMENT=dev
PROJECT_NAME=accurecg
SERVICE_NAME="${ENVIRONMENT}-malware-scanner"
SERVICE_ACCOUNT="${SERVICE_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"

gcloud config set project "${PROJECT_ID}"

# Setup bucket names

UNSCANNED_BUCKET="gs://${PROJECT_NAME}-unscanned-${ENVIRONMENT}"
QUARANTINED_BUCKET="gs://${PROJECT_NAME}-quarantined-${ENVIRONMENT}"
CLEAN_BUCKET="gs://${PROJECT_NAME}-user-files-${ENVIRONMENT}"
CVD_MIRROR_BUCKET="gs://${PROJECT_NAME}-cvd-mirror-${ENVIRONMENT}"

# create buckets
gsutil mb -l "${LOCATION}" "${UNSCANNED_BUCKET}"
gsutil mb -l "${LOCATION}" "${QUARANTINED_BUCKET}"
gsutil mb -l "${LOCATION}" "${CLEAN_BUCKET}"
gsutil mb -l "${LOCATION}" "${CVD_MIRROR_BUCKET}"

# create service account 
gcloud iam service-accounts create ${SERVICE_NAME}

# Add permissions to access the buckets to the service account
gsutil iam ch \
  "serviceAccount:${SERVICE_ACCOUNT}:objectAdmin" \
  "${UNSCANNED_BUCKET}"
gsutil iam ch \
  "serviceAccount:${SERVICE_ACCOUNT}:objectAdmin" \
  "${QUARANTINED_BUCKET}"
gsutil iam ch \
  "serviceAccount:${SERVICE_ACCOUNT}:objectAdmin" \
  "${CLEAN_BUCKET}"
gsutil iam ch \
  "serviceAccount:${SERVICE_ACCOUNT}:objectAdmin" \
  "${CVD_MIRROR_BUCKET}"


# Add policy binding
gcloud projects add-iam-policy-binding \
  "${PROJECT_ID}" \
  --member="serviceAccount:${SERVICE_ACCOUNT}" \
  --role="roles/monitoring.metricWriter"

# setup the config file
echo "Update the config file with appropriate values"
# sed "s/-bucket-name/-${PROJECT_ID}/" config.json.tmpl > config.json

# print out the config file
cat config.json

# update mirrory
python3 -m venv pyenv
. pyenv/bin/activate
pip3 install crcmod cvdupdate
./updateCvdMirror.sh "${PROJECT_NAME}-cvd-mirror-${ENVIRONMENT}"
deactivate

# list the items in mirror bucket
gsutil ls "${CVD_MIRROR_BUCKET}/cvds"

# Deploy cloud run
gcloud beta run deploy "${SERVICE_NAME}" \
  --source . \
  --region "${REGION}" \
  --no-allow-unauthenticated \
  --memory 4Gi \
  --cpu 1 \
  --concurrency 20 \
  --min-instances 0 \
  --max-instances 5 \
  --no-cpu-throttling \
  --cpu-boost \
  --service-account="${SERVICE_ACCOUNT}"


# get service url and store as a variable
SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')

curl -D - -H "Authorization: Bearer $(gcloud auth print-identity-token)" ${SERVICE_URL}

PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
PUBSUB_SERVICE_ACCOUNT="service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com"

gcloud projects add-iam-policy-binding ${PROJECT_ID} \
  --member="serviceAccount:${PUBSUB_SERVICE_ACCOUNT}" \
  --role='roles/iam.serviceAccountTokenCreator'

STORAGE_SERVICE_ACCOUNT=$(gsutil kms serviceaccount -p "${PROJECT_ID}")

gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
  --member "serviceAccount:${STORAGE_SERVICE_ACCOUNT}" \
  --role "roles/pubsub.publisher"

gcloud run services add-iam-policy-binding "${SERVICE_NAME}" \
  --region="${REGION}" \
  --member "serviceAccount:${SERVICE_ACCOUNT}" \
  --role "roles/run.invoker"

gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
  --member "serviceAccount:${SERVICE_ACCOUNT}" \
  --role "roles/eventarc.eventReceiver"


BUCKET_NAME="${PROJECT_NAME}-unscanned-${ENVIRONMENT}"
gcloud eventarc triggers create "trigger-${BUCKET_NAME}-${SERVICE_NAME}" \
  --destination-run-service="${SERVICE_NAME}" \
  --destination-run-region="${REGION}" \
  --location="${LOCATION}" \
  --event-filters="type=google.cloud.storage.object.v1.finalized" \
  --event-filters="bucket=${BUCKET_NAME}" \
  --service-account="${SERVICE_ACCOUNT}"

SUBSCRIPTION_NAME=$(gcloud eventarc triggers describe \
  "trigger-${BUCKET_NAME}-${SERVICE_NAME}" \
  --location="${LOCATION}" \
  --format="get(transport.pubsub.subscription)")

gcloud pubsub subscriptions update "${SUBSCRIPTION_NAME}" --ack-deadline=120

while : ; do
  # set MINUTE to a random number between 3 and 57
  MINUTE="$((RANDOM%55 + 3))"
  # exit loop if MINUTE isn't a multiple of 10
  [[ $((MINUTE % 10)) != 0 ]] && break
done

gcloud scheduler jobs create http \
  "${SERVICE_NAME}-mirror-update" \
  --location="${REGION}" \
  --schedule="${MINUTE} */12 * * *" \
  --oidc-service-account-email="${SERVICE_ACCOUNT}" \
  --uri="${SERVICE_URL}" \
  --http-method=post \
  --message-body='{"kind":"schedule#cvd_update"}' \
  --headers="Content-Type=application/json"


ARTIFACT_BUCKET="gs://${PROJECT_NAME}-artifacts-${ENVIRONMENT}"
gsutil mb -l "${LOCATION}" "${ARTIFACT_BUCKET}"
